{"version":3,"sources":["App.js","index.js"],"names":["dataStart","across","1","clue","answer","row","col","down","Page","styled","div","Header","h1","Commands","Command","button","CrosswordWrapper","pre","App","useState","data","setData","Date","startDate","setStartDate","crossword","useRef","focus","useCallback","event","current","fillAllAnswers","reset","setMessages","addMessage","message","m","concat","onCorrect","direction","number","onLoadedCorrect","answers","map","join","onCrosswordCorrect","isCorrect","JSON","stringify","onCellChange","char","value","autoFocus","onChange","date","year","getFullYear","month","getMonth","toString","padStart","day","getDay","abortController","AbortController","url","fetch","then","response","console","log","text","myText","myJson","parse","fetchData","abort","updateData","onClick","ref","ReactDOM","render","document","getElementById"],"mappings":"kQAMMA,EAAY,CAChBC,OAAQ,CACNC,EAAG,CACDC,KAAM,GACNC,OAAQ,GACRC,IAAK,EACLC,IAAK,IAGTC,KAAM,CACJL,EAAG,CACDC,KAAM,GACNC,OAAQ,GACRC,IAAK,EACLC,IAAK,KAKLE,EAAOC,UAAOC,IAAV,6CAIJC,EAASF,UAAOG,GAAV,mDAINC,EAAWJ,UAAOC,IAAV,0BAERI,EAAUL,UAAOM,OAAV,kDAIPC,EAAmBP,UAAOC,IAAV,8vCA4BLD,UAAOQ,IAAV,wGAuICC,MA7Hf,WAAgB,IAAD,EAEQC,mBAASnB,GAFjB,mBAENoB,EAFM,KAEDC,EAFC,OAGqBF,mBAAS,IAAIG,MAHlC,mBAGNC,EAHM,KAGKC,EAHL,KAgCPC,EAAYC,mBAEZC,EAAQC,uBAAY,SAACC,GACzBJ,EAAUK,QAAQH,UACjB,IAEGI,EAAiBH,uBAAY,SAACC,GAClCJ,EAAUK,QAAQC,mBACjB,IAEGC,EAAQJ,uBAAY,SAACC,GACzBJ,EAAUK,QAAQE,UACjB,IA5CU,EAiDmBb,mBAAS,IAjD5B,mBAiDIc,GAjDJ,WAmDPC,EAAaN,uBAAY,SAACO,GAC9BF,GAAY,SAACG,GAAD,OAAOA,EAAEC,OAAF,UAAYF,EAAZ,YAClB,IAGGG,EAAYV,uBAChB,SAACW,EAAWC,EAAQpC,GAClB8B,EAAW,eAAD,OAAgBK,EAAhB,eAAgCC,EAAhC,eAA6CpC,EAA7C,QAEZ,CAAC8B,IAMGO,EAAkBb,uBACtB,SAACc,GACCR,EAAW,qBAAD,OACaQ,EAClBC,KACC,mCAAEJ,EAAF,KAAaC,EAAb,KAAqBpC,EAArB,4BACYmC,EADZ,eAC4BC,EAD5B,eACyCpC,EADzC,QAGDwC,KAAK,UAGZ,CAACV,IAIGW,EAAqBjB,uBACzB,SAACkB,GACCZ,EAAW,uBAAD,OAAwBa,KAAKC,UAAUF,OAEnD,CAACZ,IAIGe,EAAerB,uBACnB,SAACvB,EAAKC,EAAK4C,GACThB,EAAW,kBAAD,OAAmB7B,EAAnB,eAA6BC,EAA7B,eAAuC4C,EAAvC,QAEZ,CAAChB,IAGH,OACE,eAAC1B,EAAD,WACE,cAACG,EAAD,6BAEA,sEAGA,cAAC,IAAD,CAAYwC,MAAO5B,EAAW6B,WAAW,EAAMC,SAAU,SAACC,GAAD,OAlG7D,SAAoB/B,GAClBC,EAAaD,GACb,IAAMgC,EAAOhC,EAAUiC,cACjBC,EAAQlC,EAAUmC,WAAWC,WAAWC,SAAS,EAAG,GACpDC,EAAMtC,EAAUuC,SAASH,WAAWC,SAAS,EAAG,GAClDG,EAAkB,IAAIC,gBAgBxB,OAfgB,WACd,IAAMC,EAAG,+EAA2EV,EAA3E,YAAmFE,EAAnF,YAA4FI,EAA5F,SACTK,MAAMD,GACHE,MAAK,SAASC,GAEb,OADAC,QAAQC,IAAIF,GACLA,EAASG,UAEjBJ,MAAK,SAASK,GACb,IAAMC,EAAS1B,KAAK2B,MAAMF,GAC1BH,QAAQC,IAAIG,GACZpD,EAAQoD,GACRJ,QAAQC,IAAIlD,MAGlBuD,GACO,WACLZ,EAAgBa,SA4EiDC,CAAWvB,MAE9E,eAACzC,EAAD,WACE,cAACC,EAAD,CAASgE,QAASnD,EAAlB,mBACA,cAACb,EAAD,CAASgE,QAAS/C,EAAlB,8BACA,cAACjB,EAAD,CAASgE,QAAS9C,EAAlB,sBAGF,cAAChB,EAAD,UACE,cAAC,IAAD,CACEI,KAAMA,EACN2D,IAAKtD,EACLa,UAAWA,EACXG,gBAAiBA,EACjBI,mBAAoBA,EACpBI,aAAcA,UC9LxB+B,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.82c3a894.chunk.js","sourcesContent":["import React, { useCallback, useRef, useState, useEffect } from 'react';\nimport Crossword from '@jaredreisinger/react-crossword';\nimport DatePicker from 'react-date-picker';\nimport styled from 'styled-components';\nimport { Route, Switch, Link } from \"react-router-dom\";\n\nconst dataStart = {\n  across: {\n    1: {\n      clue: '',\n      answer: '',\n      row: 0,\n      col: 0,\n    },\n  },\n  down: {\n    1: {\n      clue: '',\n      answer: '',\n      row: 0,\n      col: 0,\n    },\n  },\n};\n\nconst Page = styled.div`\n  padding: 2em;\n`;\n\nconst Header = styled.h1`\n  margin-bottom: 1em;\n`;\n\nconst Commands = styled.div``;\n\nconst Command = styled.button`\n  margin-right: 1em;\n`;\n\nconst CrosswordWrapper = styled.div`\n  margin-top: 2em;\n  max-width: 100%;\n  /* and some fun making use of the defined class names */\n  .crossword.correct {\n    rect {\n      stroke: rgb(100, 200, 100) !important;\n    }\n    svg > rect {\n      fill: rgb(100, 200, 100) !important;\n    }\n    text {\n      fill: rgb(100, 200, 100) !important;\n    }\n  }\n  .clue.correct {\n    ::before {\n      content: '\\u2713'; /* a.k.a. checkmark: âœ“ */\n      display: inline-block;\n      text-decoration: none;\n      color: rgb(100, 200, 100);\n      margin-right: 0.25em;\n    }\n    text-decoration: line-through;\n    color: rgb(130, 130, 130);\n  }\n`;\n\nconst Messages = styled.pre`\n  background-color: rgb(230, 230, 230);\n  margin: 1em 0;\n  padding: 1em;\n`;\n\n// in order to make this a more-comprehensive example, and to vet Crossword's\n// features, we actually implement a fair amount...\n\n\nfunction App() {\n\n  const [data,setData]=useState(dataStart);\n  const [startDate, setStartDate] = useState(new Date());\n  \n  function updateData(startDate) {\n    setStartDate(startDate)\n    const year = startDate.getFullYear();\n    const month = startDate.getMonth().toString().padStart(2, 0);\n    const day = startDate.getDay().toString().padStart(2, 0);\n    let abortController = new AbortController();\n      const fetchData=()=>{\n        const url = `https://raw.githubusercontent.com/sean-reid/nyt-crosswords-data/main/${year}/${month}/${day}.json`\n        fetch(url)\n          .then(function(response){\n            console.log(response)\n            return response.text();\n          })\n          .then(function(myText) {\n            const myJson = JSON.parse(myText);\n            console.log(myJson);\n            setData(myJson)\n            console.log(data);\n          });\n      }\n      fetchData();\n      return () => {\n        abortController.abort();\n      }\n    }\n\n\n  const crossword = useRef();\n\n  const focus = useCallback((event) => {\n    crossword.current.focus();\n  }, []);\n\n  const fillAllAnswers = useCallback((event) => {\n    crossword.current.fillAllAnswers();\n  }, []);\n\n  const reset = useCallback((event) => {\n    crossword.current.reset();\n  }, []);\n\n  // We don't really *do* anything with callbacks from the Crossword component,\n  // but we can at least show that they are happening.  You would want to do\n  // something more interesting than simply collecting them as messages.\n  const [messages, setMessages] = useState([]);\n\n  const addMessage = useCallback((message) => {\n    setMessages((m) => m.concat(`${message}\\n`));\n  }, []);\n\n  // onCorrect is called with the direction, number, and the correct answer.\n  const onCorrect = useCallback(\n    (direction, number, answer) => {\n      addMessage(`onCorrect: \"${direction}\", \"${number}\", \"${answer}\"`);\n    },\n    [addMessage]\n  );\n\n  // onLoadedCorrect is called with an array of the already-correct answers,\n  // each element itself is an array with the same values as in onCorrect: the\n  // direction, number, and the correct answer.\n  const onLoadedCorrect = useCallback(\n    (answers) => {\n      addMessage(\n        `onLoadedCorrect:\\n${answers\n          .map(\n            ([direction, number, answer]) =>\n              `    - \"${direction}\", \"${number}\", \"${answer}\"`\n          )\n          .join('\\n')}`\n      );\n    },\n    [addMessage]\n  );\n\n  // onCrosswordCorrect is called with a truthy/falsy value.\n  const onCrosswordCorrect = useCallback(\n    (isCorrect) => {\n      addMessage(`onCrosswordCorrect: ${JSON.stringify(isCorrect)}`);\n    },\n    [addMessage]\n  );\n\n  // onCellChange is called with the row, column, and character.\n  const onCellChange = useCallback(\n    (row, col, char) => {\n      addMessage(`onCellChange: \"${row}\", \"${col}\", \"${char}\"`);\n    },\n    [addMessage]\n  );\n\n  return (\n    <Page>\n      <Header>NYT Crosswords</Header>\n\n      <p>\n        Enter date of NYT crossword to solve.\n      </p>\n      <DatePicker value={startDate} autoFocus={true} onChange={(date) => updateData(date)} />\n\n      <Commands>\n        <Command onClick={focus}>Focus</Command>\n        <Command onClick={fillAllAnswers}>Fill all answers</Command>\n        <Command onClick={reset}>Reset</Command>\n      </Commands>\n\n      <CrosswordWrapper>\n        <Crossword\n          data={data}\n          ref={crossword}\n          onCorrect={onCorrect}\n          onLoadedCorrect={onLoadedCorrect}\n          onCrosswordCorrect={onCrosswordCorrect}\n          onCellChange={onCellChange}\n        />\n      </CrosswordWrapper>\n    </Page>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './App.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}